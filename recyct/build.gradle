apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.showang'

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'jacoco'

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 31
        versionCode 100
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues true

            includeAndroidResources = true
        }
    }

}

ext {
    supportLibraryVersion = "28.0.0"
    anko_version = '0.10.4'
    coverageSourceDirs = 'src/test/java'
    powermock_version = '2.0.0-beta.5'
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    testImplementation 'junit:junit:4.13.2'
    def mockkVersion = '1.12.1'
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "io.mockk:mockk-agent-jvm:$mockkVersion"

    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getClassDirectories().setFrom(fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewBinder*.*',
                       '**/*$InjectAdapter*.*',
                       '**/*Injector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*Test*.*',
                       '**/*Activity*.*',
                       '**/CiMattersApplication*.*',
                       'android/**/*.*']
    ))
//    classDirectories = fileTree(
//            dir: "$buildDir/tmp/kotlin-classes/debug",
//            excludes: ['**/R.class',
//                       '**/R$*.class',
//                       '**/*$ViewBinder*.*',
//                       '**/*$InjectAdapter*.*',
//                       '**/*Injector*.*',
//                       '**/BuildConfig.*',
//                       '**/Manifest*.*',
//                       '**/*Test*.*',
//                       '**/*Activity*.*',
//                       '**/CiMattersApplication*.*',
//                       'android/**/*.*']
//    )

    getAdditionalSourceDirs().setFrom(files(coverageSourceDirs))
//    additionalSourceDirs = files(coverageSourceDirs)
    getSourceDirectories().setFrom(files('src/main/java'))
//    sourceDirectories = files('src/main/java')
    getExecutionData().setFrom(files("$buildDir/jacoco/testDebugUnitTest.exec"))
//    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
}